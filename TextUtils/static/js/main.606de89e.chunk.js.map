{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","Abouttext","onClick","togglemode","htmlFor","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","disabled","length","newtext","toUpperCase","showalert","toLowerCase","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","filter","element","Alert","height","alert","role","msg","App","setMode","_useState3","_useState4","setalert","message","setTimeout","Fragment","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.606de89e.chunk.js","sourcesContent":["import React from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className={`navbar-brand text-${props.mode==='light'?'dark':'light'}`} href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler text-light\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse text-light\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className={`nav-link active text-${props.mode==='light'?'dark':'light'}`} aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className={`nav-link text-${props.mode==='light'?'dark':'light'}`} href=\"/about\">{props.Abouttext}</a>\r\n        </li>\r\n      </ul>\r\n      {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    </div>\r\n  )\r\n}\r\n// Navbar.PropTypes ={\r\n//   title: PropTypes.string,\r\n//   Abouttext:PropTypes.string\r\n// }\r\n","import React from 'react'\r\nimport { useState } from \"react\"\r\n\r\nexport default function Textform(props) {\r\n  const handlecopy =()=>{\r\n    console.log(\"text is copied\")\r\n    let text=document.getElementById('mybox')\r\n    text.select()\r\n    text.setSelectionRange(0,9999)\r\n    navigator.clipboard.writeText(text.value)\r\n    props.showalert(\"Copied to clipboard\" ,\"success\")\r\n  }\r\n\r\n  const handleclear =()=>{\r\n    console.log(\"text is clear\")\r\n    setText(\"\")\r\n    props.showalert(\"Cleared the text area\" ,\"success\")\r\n  }\r\n\r\n  const handleUpclick =()=>{\r\n    console.log(\"Uppercase was clicked\")\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext)\r\n    props.showalert(\"Converted into Uppercase!\" ,\"success\")\r\n  }\r\n\r\n  const handlelowclick =()=>{\r\n    console.log(\"Uppercase was clicked\")\r\n    let newtext = text.toLowerCase();\r\n    setText(newtext)\r\n    props.showalert(\"Converted into lowercase!\" ,\"success\")\r\n  }\r\n\r\n  const handleOnchange =(event)=>{\r\n    console.log(\"Onchange click\")\r\n    setText(event.target.value)\r\n  }\r\n\r\n  const handleextraspces=()=>{\r\n    let newtext=text.split(/[ ]+/);\r\n    setText(newtext.join(\" \"))\r\n    props.showalert(\"Space is cleard\" ,\"Success\")\r\n  }\r\n  const[text, setText] =useState('')\r\n  return (\r\n    <div>\r\n      <div className=\"container\"  style={{color : props.mode==='dark'?'white':'black' }}>\r\n\r\n\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text}  onChange={handleOnchange} style={{backgroundColor : props.mode==='dark'?'#828282':'white' , color: props.mode==='dark'?'white':'black'}} id=\"mybox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button  disabled={text.length===0} type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={handleUpclick}>Convert Uppercase</button>\r\n        <button disabled={text.length===0} type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={handlelowclick}>Convert Lowercase</button>\r\n        <button disabled={text.length===0} type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={handleclear}>Clear Text</button>\r\n        <button disabled={text.length===0} type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={handlecopy}>Copy Text</button>\r\n        <button disabled={text.length===0} type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={handleextraspces}>Clear Extra Space</button>\r\n\r\n        </div>\r\n        <div className=\"container my-3\" style={{color : props.mode==='dark'?'white':'black' }}>\r\n          <h2>Your text summary</h2>\r\n          <p>{text===''?0:text.split(/\\s/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n          <p>{0.008*text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes to read</p>\r\n          <h2>Preview</h2>\r\n          <p>{text.length>0?text:\"Write something in the box to preview\"}</p>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    // const capatlize = (word)=>{\r\n    //     const lower = word.toLowerCase();\r\n    //     return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    // }\r\n  return (\r\n    <div style={{height:'50px'}}>\r\n    {props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.type}</strong>:{props.alert.msg} \r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./components/Textform\";\nimport React,{ useState } from 'react'\nimport Alert from \"./components/Alert\";\n\nfunction App() {\n  const[mode, setMode] = useState('light') // wheather dark mode is enabled or not\n  const [alert, setalert] = useState(null)\n\n  // alert function\n\n  const showalert = (message ,type)=>{\n    setalert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 1500);\n  }\n\n  const togglemode=()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showalert(\"Dark mode has been enabled\" , \"success\")\n    }\n    else if(mode==='dark'){\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showalert(\"Light mode has been enabled\" , \"success\")\n    }\n  }\n  return (\n    <>\n<Navbar title = \"TextUtils\" Abouttext=\" Abouttext\" mode={mode} togglemode={togglemode}/>\n<Alert alert = {alert}/>\n<Textform showalert = {showalert} heading=\"Enter Your Text to Analyze\"/>\n{/* <About/>  */}\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}